############### 9PPC
print "**************************************************************"
print "******************  9PPC discretization **********************"
print "**************************************************************"
print "=== Symmetric ==="
Xp=np.array([-0.5,0.5,0.5,-0.5,-0.5,0.,0.5,0.,0.])
Yp=np.array([-0.5,-0.5,0.5,0.5,0.,0.,0.,-0.5,0.5])

Xp2=np.array([-0.25,0.25,0.25,-0.25,-0.25,0.,0.25,0.,0.])
Yp2=np.array([-0.25,-0.25,0.25,0.25,0.,0.,0.,-0.25,0.25])

DCU_natural=np.zeros((4,samples))
CTU_natural=np.zeros((4,samples))
DCU_shifted=np.zeros((4,samples))
CTU_shifted=np.zeros((4,samples))
fig = plt.figure()
ax1=plt.subplot2grid((1,2),(0,0))
ax2=plt.subplot2grid((1,2),(0,1))
col=['b','r','g','k','m','y','c']
for p in range(1):
    for i in range(samples):
        residual=symbolResidual(p,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
        solution=gridSearch(residual)
        DCU_natural[p,i]=cx[i]*solution/2.#.append(cx[i]*solution/2.)
        residual=symbolResidual(p,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
        solution=gridSearch(residual)
        CTU_natural[p,i]=cx[i]*solution/2.#.append(cx[i]*solution/2.)

        # Shift symmetrically
        residual=symbolResidual(p,cx[i],cy,(Xp2,Yp2),(Xp2,Yp2),(Xp2,Yp2))
        solution=gridSearch(residual)
        DCU_shifted[p,i]=cx[i]*solution/2.#.append(cx[i]*solution/2.)
        residual=symbolResidual(p,cx[i],cy,(Xp2,Yp2),(Xp2,Yp2),(Xp2,Yp2),(Xp2,Yp2))
        solution=gridSearch(residual)
        CTU_shifted[p,i]=cx[i]*solution/2.#.append(cx[i]*solution/2.)
#     ax1.plot(cx/cy,DCU_natural[p,:],col[p],label='nat'+str(p))
#     ax1.plot(cx/cy,DCU_shifted[p,:],col[p],label='shift'+str(p))
#     ax2.plot(cx/cy,CTU_natural[p,:],col[p],label='nat'+str(p))
#     ax2.plot(cx/cy,CTU_shifted[p,:],col[p],linestyle='--',label='shift'+str(p))

# ax1.grid();ax2.grid()
# ax1.legend();ax2.legend()
# plt.show()


# Shift symmetrically
for i in range(samples):
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    DCU_shifted.append(cx[i]*solution/2.)
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    CTU_shifted.append(cx[i]*solution/2.)

export2DTeXFile('2dCFL_9ppcS_DCU.tex',cx/cy,np.array([DCU_natural,DCU_shifted]))
export2DTeXFile('2dCFL_9ppcS_CTU.tex',cx/cy,np.array([CTU_natural,CTU_shifted]))

Xp=np.array([-0.5,0.5,0.5,-0.5,-0.5,0.,0.5,0.,0.])
Yp=np.array([-0.5,-0.5,0.5,0.5,0.,0.,0.,-0.5,0.5])+0.25


DCU_natural=[]
CTU_natural=[]
DCU_shifted=[]
CTU_shifted=[]
for i in range(samples):
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    DCU_natural.append(cx[i]*solution/2.)
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    CTU_natural.append(cx[i]*solution/2.)

Xp=np.array([-0.5,0.5,0.5,-0.5,-0.5,0.,0.5,0.,0.])
Yp=np.array([-0.5,-0.5,0.5,0.5,0.,0.,0.,-0.5,0.5])-0.25
# Shift symmetrically
for i in range(samples):
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    DCU_shifted.append(cx[i]*solution/2.)
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    CTU_shifted.append(cx[i]*solution/2.)

export2DTeXFile('2dCFL_4ppcV_DCU.tex',cx/cy,np.array([DCU_natural,DCU_shifted]))
export2DTeXFile('2dCFL_4ppcV_CTU.tex',cx/cy,np.array([CTU_natural,CTU_shifted]))


Xp=np.array([-0.5,0.5,0.5,-0.5,-0.5,0.,0.5,0.,0.])+0.25
Yp=np.array([-0.5,-0.5,0.5,0.5,0.,0.,0.,-0.5,0.5])

DCU_natural=[]
CTU_natural=[]
DCU_shifted=[]
CTU_shifted=[]
for i in range(samples):
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    DCU_natural.append(cx[i]*solution/2.)
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    CTU_natural.append(cx[i]*solution/2.)

Xp=np.array([-0.5,0.5,0.5,-0.5,-0.5,0.,0.5,0.,0.])-0.25
Yp=np.array([-0.5,-0.5,0.5,0.5,0.,0.,0.,-0.5,0.5])
# Shift symmetrically
for i in range(samples):
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    DCU_shifted.append(cx[i]*solution/2.)
    residual=symbolResidual(0,cx[i],cy,(Xp,Yp),(Xp,Yp),(Xp,Yp),(Xp,Yp))
    solution=gridSearch(residual)
    CTU_shifted.append(cx[i]*solution/2.)

export2DTeXFile('2dCFL_4ppcH_DCU.tex',cx/cy,np.array([DCU_natural,DCU_shifted]))
export2DTeXFile('2dCFL_4ppcH_CTU.tex',cx/cy,np.array([CTU_natural,CTU_shifted]))
